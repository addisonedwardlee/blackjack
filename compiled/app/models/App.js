// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.App = (function(_super) {
    __extends(App, _super);

    function App() {
      return App.__super__.constructor.apply(this, arguments);
    }

    App.prototype.initialize = function() {
      var deck;
      this.set('deck', deck = new Deck());
      this.set('playerHand', deck.dealPlayer());
      return this.set('dealerHand', deck.dealDealer());
    };

    App.prototype.checkScores = function() {
      var dealerScore, playerScore, _ref, _ref1;
      playerScore = this.get('playerHand').scores();
      dealerScore = this.get('dealerHand').scores();
      if (dealerScore[0] > 21) {
        this.trigger('win', this);
      } else if (playerScore[0] > 21) {
        this.trigger('lose', this);
      } else if (playerScore[1] === 21 && this.get('playerHand').length === 2) {
        this.trigger('win', this);
      } else if (dealerScore[1] === 21 && this.get('dealerHand').length === 2) {
        this.trigger('lose', this);
      }
      if (this.get('dealerHand').first().get('revealed')) {
        if ((16 < (_ref = dealerScore[1]) && _ref < 22)) {
          if (playerScore[1] || playerScore[0] > dealerScore[1]) {
            this.trigger('win', this);
          } else {
            this.trigger('lose', this);
          }
        } else if ((16 < (_ref1 = dealerScore[0]) && _ref1 < 22)) {
          if (playerScore[1] || playerScore[0] > dealerScore[0]) {
            this.trigger('win', this);
          } else {
            this.trigger('lose', this);
          }
        } else if (dealerScore[0] < 22) {
          this.get('dealerHand').hit();
          this.checkScores();
        }
      }
      if ((dealerScore[0] || dealerScore[1]) === playerScore[1]) {
        this.trigger('tie', this);
      }
      if ((dealerScore[0] || dealerScore[1]) === playerScore[0]) {
        return this.trigger('tie', this);
      }
    };

    App.prototype.newHand = function() {
      $('.games').empty();
      $('.message').empty();
      return new AppView({
        model: new App()
      }).$el.appendTo('.games');
    };

    return App;

  })(Backbone.Model);

}).call(this);

//# sourceMappingURL=App.map
